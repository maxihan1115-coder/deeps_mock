import { PrismaClient } from '@prisma/client';
import { URL } from 'node:url';

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

console.log('üîå Initializing Prisma client...');
// ENV Ï†ïÍ∑úÌôî: ÏñëÏ™Ω Îî∞Ïò¥Ìëú/Í≥µÎ∞± Ï†úÍ±∞
const rawDatabaseUrl = process.env.DATABASE_URL;
let normalizedDatabaseUrl = rawDatabaseUrl
  ? rawDatabaseUrl.trim().replace(/^"|"$/g, '').replace(/^'|'$/g, '')
  : undefined;
console.log('üåê Database URL:', normalizedDatabaseUrl ? 'Set' : 'Not set');

// Ï∂îÍ∞Ä ÏßÑÎã® Î°úÍ∑∏: Ìò∏Ïä§Ìä∏/Ìè¨Ìä∏/DBÎ™Ö ÌëúÏãú (ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÎßàÏä§ÌÇπ)
if (normalizedDatabaseUrl) {
  try {
    const parsed = new URL(normalizedDatabaseUrl);
    // DBÎ™ÖÏù¥ ÎπÑÏñ¥ ÏûàÏúºÎ©¥ Í∏∞Î≥∏ DBÎ™Ö Î≥¥Ï∂©
    if (!parsed.pathname || parsed.pathname === '/') {
      parsed.pathname = '/deeps_mock';
      normalizedDatabaseUrl = parsed.toString();
    }
    // ÏùºÎ∂Ä MySQL Î≥ÄÌòïÏóêÏÑú prepared statements Ï†úÏïΩ ÌöåÌîº
    if (!parsed.searchParams.has('planetscale_mode')) {
      parsed.searchParams.set('planetscale_mode', 'true');
      normalizedDatabaseUrl = parsed.toString();
    }
    const maskedAuth = parsed.username
      ? `${parsed.username}:${parsed.password ? '***' : ''}`
      : '';
    console.log(
      'üîé DB parsed =>',
      `protocol=${parsed.protocol.replace(':', '')}, host=${parsed.hostname}, port=${parsed.port || '(default)'}, db=${parsed.pathname.replace('/', '')}, auth=${maskedAuth ? '(set)' : '(none)'}`
    );
    if (!parsed.protocol.startsWith('mysql')) {
      console.error('‚ùå DATABASE_URL must start with mysql://');
    }
    if (parsed.port && parsed.port !== '30079') {
      console.warn('‚ö†Ô∏è Unexpected DB port detected:', parsed.port, '(expected 30079)');
    }
  } catch (e) {
    console.error('‚ùå DATABASE_URL parse error:', e instanceof Error ? e.message : e);
  }
}

let prismaClient: PrismaClient;

try {
  prismaClient = globalForPrisma.prisma ?? new PrismaClient({
    log: ['query', 'info', 'warn', 'error'],
    datasources: normalizedDatabaseUrl
      ? { db: { url: normalizedDatabaseUrl } }
      : undefined,
  });

  if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prismaClient;
  
  console.log('‚úÖ Prisma client initialized successfully');
} catch (error) {
  console.error('‚ùå Failed to initialize Prisma client:', error);
  throw new Error('Prisma client initialization failed');
}

export const prisma = prismaClient;
