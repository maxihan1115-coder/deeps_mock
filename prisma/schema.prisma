// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  uuid      Int      @unique
  startDate DateTime? // 퀘스트 시작 시간 추가
  createdAt DateTime @default(now())
  lastLoginAt DateTime @default(now())

  // Relations
  attendanceRecords AttendanceRecord[]
  gameStates       GameState[]
  highScores       HighScore[]
  questProgresses  QuestProgress[]
  questParticipations QuestParticipation[] // 추가
  currencies       UserCurrency[]
  transactions     CurrencyTransaction[]
  shopPurchases    ShopPurchase[]

  @@map("users")
}

model AttendanceRecord {
  id        String   @id @default(uuid())
  userId    Int      // User.uuid (숫자) 참조
  date      String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@map("attendance_records")
}


// 공통 퀘스트 카탈로그 (모든 유저가 공유하는 정의)
model QuestCatalog {
  id          String   @id // 고정 id (예: '1' ~ '12')
  title       String
  description String
  type        QuestType
  maxProgress Int
  reward      Int
  createdAt   DateTime @default(now())

  @@map("quest_catalog")
}

// 유저별 퀘스트 진행도 (활성화 이후 진행만 저장)
model QuestProgress {
  id            String   @id @default(uuid())
  userId        Int      // User.uuid 참조
  catalogId     String   // QuestCatalog.id 참조
  progress      Int      @default(0)
  isCompleted   Boolean  @default(false)
  lastResetTime DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@unique([userId, catalogId])
  @@map("quest_progress")
}

model GameState {
  id        String   @id @default(uuid())
  userId    Int      @unique // User.uuid (숫자) 참조
  board     String   // JSON string
  score     Int      @default(0)
  level     Int      @default(1)
  lines     Int      @default(0)
  isGameOver Boolean  @default(false)
  isPaused  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@map("game_states")
}

model TempCode {
  id        String   @id @default(uuid())
  code      String   @unique
  userId    Int      // User.uuid (숫자) 참조
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("temp_codes")
}

model HighScore {
  id        String   @id @default(uuid())
  userId    Int      // User.uuid (숫자) 참조
  score     Int
  level     Int
  lines     Int
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@map("high_scores")
}

model PlatformLink {
  id            String   @id @default(uuid())
  gameUuid      Int      @unique // 게임 UUID (연동된 게임 계정)
  platformUuid  String   // 플랫폼 UUID (연동된 플랫폼 계정)
  platformType  String   // 플랫폼 타입 (예: "quest_service", "game_service")
  linkedAt      DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("platform_links")
}

model PlatformLinkHistory {
  id            String   @id @default(uuid())
  gameUuid      Int      // 게임 UUID (재연동 방지를 위한 이력)
  platformUuid  String   // 플랫폼 UUID
  platformType  String   // 플랫폼 타입
  action        String   // 액션 타입 (CONNECT, DISCONNECT)
  linkedAt      DateTime // 연동 시점
  disconnectedAt DateTime? // 해제 시점
  createdAt     DateTime @default(now())

  @@map("platform_link_history")
}

model QuestParticipation {
  id        String   @id @default(uuid())
  gameUuid  Int      // 게임 UUID
  startDate DateTime // 퀘스트 참여 시작 시간
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // User 테이블과의 관계 추가
  user User @relation(fields: [gameUuid], references: [uuid], onDelete: Cascade)
  
  @@unique([gameUuid]) // gameUuid에 대한 고유 인덱스 추가
  @@map("quest_participation")
}

// 사용자 재화 정보
model UserCurrency {
  id        String   @id @default(uuid())
  userId    Int      // User.uuid 참조
  gold      Int      @default(0)      // 무료재화 (골드)
  diamond   Int      @default(0)      // 유료재화 (다이아)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  
  @@unique([userId])
  @@map("user_currencies")
}

// 재화 거래 내역
model CurrencyTransaction {
  id          String   @id @default(uuid())
  userId      Int      // User.uuid 참조
  type        CurrencyType
  amount      Int      // 양수: 획득, 음수: 소모
  reason      String   // 거래 사유
  gameScore   Int?     // 게임 점수 (골드 획득 시)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  
  @@map("currency_transactions")
}

// 상점 아이템
model ShopItem {
  id          String   @id @default(uuid())
  name        String   // 아이템 이름
  description String?  // 아이템 설명
  price       Int      // 가격
  currency    CurrencyType // GOLD 또는 DIAMOND
  isActive    Boolean  @default(true) // 판매 중인지 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 구매 내역
  purchases   ShopPurchase[]
  
  @@map("shop_items")
}

// 상점 구매 내역
model ShopPurchase {
  id        String   @id @default(uuid())
  userId    Int      // User.uuid 참조
  itemId    String   // ShopItem.id 참조
  price     Int      // 구매 가격
  currency  CurrencyType // 사용한 재화 타입
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  item ShopItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@map("shop_purchases")
}

enum CurrencyType {
  GOLD
  DIAMOND
}

enum QuestType {
  DAILY
  WEEKLY
  MONTHLY
  SINGLE
}
